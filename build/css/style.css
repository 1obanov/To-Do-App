@import url("https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap"); /* normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
	 ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
	 ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
	 ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
	 ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
	 ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
	 ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit; /* 1 */
  font: inherit; /* 2 */
  margin: 0; /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type=button],
input[type=reset],
input[type=submit] {
  -webkit-appearance: button; /* 2 */
  cursor: pointer; /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type=checkbox],
input[type=radio] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type=number]::-webkit-inner-spin-button,
input[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type=search] {
  -webkit-appearance: textfield; /* 1 */
  box-sizing: content-box; /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type=search]::-webkit-search-cancel-button,
input[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
	 ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

html {
  font-size: var(--rem-base);
  box-sizing: border-box;
  padding: constant(safe-area-inset);
  padding: env(safe-area-inset);
}
@media (max-width: 1024px) {
  html {
    font-size: calc(var(--rem-base) - 1.5px);
  }
}
@media (max-width: 768px) {
  html {
    font-size: calc(var(--rem-base) - 2px);
  }
}
@media (max-width: 667px) {
  html {
    font-size: calc(var(--rem-base) - 2.5px);
  }
}
@media (max-width: 375px) {
  html {
    overflow-x: hidden;
    font-size: calc(var(--rem-base) - 3px);
  }
}

body {
  color: rgb(var(--brand-color));
  font: var(--base-font-size)/var(--base-line-height) "Lato", "Arial", "Helvetica Neue", "Helvetica", sans-serif;
  min-width: 320px;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6,
.h {
  font-family: "Lato", "Arial", "Helvetica Neue", "Helvetica", sans-serif;
  font-weight: bold;
  color: rgb(var(--headings));
}
h1 a,
.h1 a,
h2 a,
.h2 a,
h3 a,
.h3 a,
h4 a,
.h4 a,
h5 a,
.h5 a,
h6 a,
.h6 a,
.h a {
  color: inherit;
  font-size: inherit;
}

h1,
.h1 {
  font-size: var(--h1);
  margin: 0 0 0.3em;
}

h2,
.h2 {
  font-size: var(--h2);
  margin: 0 0 0.4em;
}

h3,
.h3 {
  font-size: var(--h3);
  margin: 0 0 0.5em;
}

h4,
.h4 {
  font-size: var(--h4);
  margin: 0 0 0.6em;
}

h5,
.h5 {
  font-size: var(--h5);
  margin: 0 0 0.7em;
}

h6,
.h6 {
  font-size: var(--h6);
  margin: 0 0 0.8em;
}

p {
  margin-bottom: 1.2em;
  margin-top: 0;
}

a {
  color: rgb(var(--base-link-color));
  text-decoration: none;
  transition: all var(--animation-duration) var(--animation-timing-function);
}
@media not all and (pointer: coarse) {
  a:hover {
    opacity: 0.8;
  }
}

img {
  max-width: 100%;
  height: auto;
  vertical-align: top;
}

ul,
ol {
  list-style: none;
  margin-top: 0;
  padding-left: 0px;
}
ul li,
ol li {
  list-style: none;
}

* {
  box-sizing: inherit;
  max-height: 1000000px;
}
*:after, *:before {
  box-sizing: inherit;
}

.resize-active {
  transition: none !important;
}
.resize-active *,
.resize-active *:before,
.resize-active *:after {
  transition: inherit !important;
}

.container {
  width: 100%;
  margin: 0 auto;
  padding-left: var(--gutter);
  padding-right: var(--gutter);
  max-width: calc(1400px + var(--gutter) * 2);
}
.container._small {
  max-width: calc(700px + var(--gutter) * 2);
}

html,
body {
  height: 100%;
}

.wrapper {
  display: grid;
  grid-template-rows: auto 1fr auto;
  min-height: 100%;
  width: 100%;
  position: relative;
  overflow: hidden;
}

.main,
.header,
.footer {
  min-width: 0;
}

.header {
  position: relative;
  color: rgb(var(--white-color));
  padding: 15px 0;
}
.header .container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.header .logo {
  text-decoration: line-through;
  font-size: 20px;
  font-weight: 700;
}
.header .link {
  font-size: 14px;
  font-weight: 400;
  font-style: italic;
  text-decoration: underline;
}

.headline {
  border-bottom: 1px solid rgb(var(--brand-color));
  margin-bottom: 2rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.headline-title {
  text-transform: capitalize;
  margin: 0;
}

.todo-app {
  padding: 5rem 0 13rem;
}
.todo-app .info {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 10px;
}
.todo-app .info #clear-completed-button,
.todo-app .info #clear-all-button {
  border: none;
  background: none;
  color: rgb(var(--brand-color));
  position: relative;
  padding: 0;
  margin: 0;
  flex-shrink: 0;
  position: relative;
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 3px;
  transition: color var(--animation-duration) var(--animation-timing-function);
}
@media not all and (pointer: coarse) {
  .todo-app .info #clear-completed-button:hover,
.todo-app .info #clear-all-button:hover {
    color: rgba(var(--brand-color), 0.7);
  }
  .todo-app .info #clear-completed-button:hover svg path,
.todo-app .info #clear-all-button:hover svg path {
    fill: rgba(var(--brand-color), 0.7);
  }
}
.todo-app .info #clear-completed.hidden,
.todo-app .info #clear-all.hidden {
  opacity: 0.4;
  cursor: not-allowed;
}
.todo-app .info #clear-completed.hidden button,
.todo-app .info #clear-all.hidden button {
  pointer-events: none;
}
.todo-app #no-tasks-message {
  display: flex;
  align-items: center;
  gap: 5px;
  text-transform: uppercase;
  font-size: 14px;
  font-weight: 700;
  color: rgb(var(--gray-color));
  letter-spacing: 0.05rem;
}
@media (max-width: 767px) {
  .todo-app #no-tasks-message {
    font-size: 12px;
  }
}
.todo-app #no-tasks-message img {
  max-width: 16px;
}
@media (max-width: 767px) {
  .todo-app #tasks-left-message,
.todo-app #success-message {
    font-size: 14px;
  }
}

.todo-list {
  padding: 0;
  margin: 1.5rem 0 0 0;
}
.todo-list li {
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  gap: 20px;
  position: relative;
  margin-bottom: 1rem;
  border: 1px solid rgb(var(--border-color));
  border-radius: 8px;
  transition: box-shadow var(--animation-duration) var(--animation-timing-function);
  padding: 14px 20px;
}
@media (max-width: 767px) {
  .todo-list li {
    padding: 14px;
  }
}
@media not all and (pointer: coarse) {
  .todo-list li:hover {
    box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px 0px;
  }
}
.todo-list li:last-child {
  margin-bottom: 0;
}
.todo-list li .content {
  width: 100%;
  position: relative;
  display: flex;
  align-items: flex-start;
}
.todo-list li .content input[type=checkbox] {
  padding: 0;
  height: initial;
  width: initial;
  margin-bottom: 0;
  display: none;
}
.todo-list li .content label {
  position: relative;
  display: flex;
}
.todo-list li .content label .checkbox {
  background-color: rgba(var(--border-color), 0.4);
  border: 1px solid rgb(var(--border-color));
  display: flex;
  position: relative;
  width: 16px;
  height: 16px;
  cursor: pointer;
  margin: 4px 10px 0 0;
  flex-shrink: 0;
  transition: border var(--animation-duration) var(--animation-timing-function);
}
@media not all and (pointer: coarse) {
  .todo-list li .content label .checkbox:hover {
    border: 1px solid rgba(var(--brand-color), 0.1);
  }
}
.todo-list li .content label .label {
  word-break: break-word;
}
.todo-list li .content label .label:read-write:focus {
  outline: none;
}
.todo-list li .amends {
  display: flex;
  align-items: center;
  gap: 15px;
  min-height: 24px;
}
.todo-list li .amends .edit,
.todo-list li .amends .remove {
  font-size: 12px;
  color: rgb(var(--gray-color));
  cursor: pointer;
  transition: color var(--animation-duration) var(--animation-timing-function);
}
@media not all and (pointer: coarse) {
  .todo-list li .amends .edit:hover,
.todo-list li .amends .remove:hover {
    color: rgb(var(--brand-color));
  }
}
.todo-list li .amends .edit.disabled,
.todo-list li .amends .remove.disabled {
  pointer-events: none;
  opacity: 0.5;
}
.todo-list li.completed {
  background: rgba(var(--border-color), 0.4);
}
.todo-list li.completed .content label .checkbox {
  background: rgb(var(--white-color));
}
.todo-list li.completed .content label .checkbox:after {
  position: absolute;
  content: "";
  background-image: url("../img/icons/long-tick.svg");
  background-repeat: no-repeat;
  width: 16px;
  height: 17px;
  top: -4px;
  left: 2px;
}
.todo-list li.completed .content label .label {
  text-decoration: line-through;
  color: rgb(var(--gray-color));
}
.todo-list li.disabled {
  pointer-events: none;
  opacity: 0.5;
}
.todo-list li.active {
  border: 1px solid rgba(var(--brand-color), 0.3);
}

.todo-add {
  position: fixed;
  max-width: 700px;
  width: calc(100% - 40px);
  bottom: 0;
  z-index: 2;
  left: 50%;
  transform: translateX(-50%);
  margin-bottom: 2.4rem;
}
.todo-add form {
  position: relative;
  display: flex;
}
.todo-add form input {
  width: 100%;
  border: 0;
  padding: 2.4rem 7.2rem 2.4rem 2.4rem;
  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
  border-radius: 12px;
  outline: none;
}
.todo-add form button {
  position: absolute;
  right: 2.4rem;
  top: 50%;
  transform: translateY(-50%);
  border: none;
  background: none;
  display: flex;
  padding: 0;
  margin: 0;
}
.todo-add form button img {
  transition: all var(--animation-duration) var(--animation-timing-function);
}
@media not all and (pointer: coarse) {
  .todo-add form button img:hover {
    transform: rotate(180deg);
  }
}

.modal-warning {
  padding: 1.5rem 2rem;
  background: rgb(var(--light-red-color));
  color: rgb(var(--red-color));
  max-width: max-content;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  text-align: center;
  transform: translateX(calc(100% + 1rem));
  position: absolute;
  top: 1rem;
  right: 1rem;
  transition: all 0.5s cubic-bezier(0.68, -0.55, 0.25, 1.35);
}
.modal-warning .icon {
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  border: 1px solid rgb(var(--red-color));
}
.modal-warning p {
  margin-bottom: 0;
}
.modal-warning.show {
  transform: translateX(0);
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
